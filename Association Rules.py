# -*- coding: utf-8 -*-
"""Asosi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/173Trhpz0_AXptPhpqCqomXkzQ6z2FpGI
"""

import pandas as pd
df = pd.read_excel("Online retail.xlsx")

df.columns = ['Items']   # Create a column Name

# Handle missing values
df.dropna(inplace=True)

# Remove duplicates
df.drop_duplicates(inplace=True)

# Convert data to appropriate format
items_list = df['Items'].tolist()
transactions = [item.split(',') for item in items_list]

#!pip install mlxtend

from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

# Encode transactions into a DataFrame
te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)
df_encoded = pd.DataFrame(te_ary, columns=te.columns_)
df_encoded

# Apply the Apriori algorithm with a lower support threshold
# Lowered support threshold
min_support = 0.01
itemsets = apriori(df_encoded, min_support=min_support, use_colnames=True)
print(itemsets.head(10))
print(itemsets.shape[0])

# Lowered confidence threshold
min_confidence = 0.5
rules = association_rules(itemsets, metric="confidence", min_threshold=min_confidence)

print(f"Generated {rules.shape[0]} rules after filtering")
print(rules.head(10))

# Lowered lift threshold
min_lift = 1.0
rules = rules[rules['lift'] >= min_lift]
rules = rules.sort_values(by=['lift', 'confidence'], ascending=[False, False])
print(f"Generated {rules.shape[0]} rules after filtering")
print(rules.head(10))

num_rules = rules.shape[0]
num_rules

rules.describe()

# High-value rules: Lift > 2,
high_lift_rules = rules[rules['lift'] > 2]
print("Shape of High Lift Rules:",high_lift_rules.shape[0],"\n")
print(high_lift_rules.head())

# High-value rules:  Confidence > 0.8
high_confidence_rules = rules[rules['confidence'] > 0.8]
print("Shape of High Confidence Rules:",high_confidence_rules.shape[0],"\n")
print(high_confidence_rules.head())

#  High-value rules: Support > 0.02
high_support_rules = rules[rules['support'] > 0.02]
print("Shape of High Support rules:",high_support_rules.shape[0],"\n")
print(high_support_rules.head())

# Investigate specific items
item_of_interest = 'T-LIGHT HOLDER'
rules_with_item = rules[rules['antecedents'].apply(lambda x: item_of_interest in x)]
print(f"\nRules involving '{item_of_interest}':")
print(rules_with_item)

# Visualization

import seaborn as sns
import matplotlib.pyplot as plt

# Histogram
plt.figure(figsize=(10, 6))
sns.histplot(rules['lift'], bins=20, kde=True)
plt.title('Distribution of Lift Values')
plt.xlabel('Lift')
plt.ylabel('Frequency')
plt.show()

# Scatter plot of support vs. confidence, sized by lift
plt.figure(figsize=(10, 6))
sns.scatterplot(x='support', y='confidence', size='lift', data=rules, hue='lift', palette='coolwarm', sizes=(20, 200))
plt.title('Support vs. Confidence (Sized by Lift)')
plt.xlabel('Support')
plt.ylabel('Confidence')
plt.legend(loc='best', title="Lift")
plt.show()

for idx, rule in high_lift_rules.iterrows():
    antecedents = ', '.join(list(rule['antecedents']))
    consequents = ', '.join(list(rule['consequents']))
    support = rule['support']
    confidence = rule['confidence']
    lift = rule['lift']
    print(f"\nRule: If a customer buys [{antecedents}], they are likely to buy [{consequents}] as well.")
    print(f" - Support: {support:.2f}")
    print(f" - Confidence: {confidence:.2f}")
    print(f" - Lift: {lift:.2f}")

# Frequently purchased product combinations
top_support_rules = rules.sort_values(by='support', ascending=False).head(5)
print("\n1. Frequently Purchased Product Combinations:")
for idx, rule in top_support_rules.iterrows():
    antecedents = ', '.join(list(rule['antecedents']))
    consequents = ', '.join(list(rule['consequents']))
    print(f" - Customers who buy [{antecedents}] often buy [{consequents}] together.")

# Products that have strong associations with others
print("\n2. Products with Strong Associations (High Lift):")
for idx, rule in high_lift_rules.iterrows():
    antecedents = ', '.join(list(rule['antecedents']))
    consequents = ', '.join(list(rule['consequents']))
    print(f" - Buying [{antecedents}] significantly increases the likelihood of buying [{consequents}].")

# Specific products of interest
item_of_interest = 'T-LIGHT HOLDER'
rules_with_item = rules[rules['antecedents'].apply(lambda x: item_of_interest in x)]
print(f"\n3. Purchasing Behavior Involving '{item_of_interest}':")
for idx, rule in rules_with_item.iterrows():
    consequents = ', '.join(list(rule['consequents']))
    support = rule['support']
    confidence = rule['confidence']
    lift = rule['lift']
    print(f" - Customers who buy [{item_of_interest}] often buy [{consequents}] with a confidence of {confidence:.2f} and a lift of {lift:.2f}.")

# Cross-selling opportunities
high_confidence_rules = rules[rules['confidence'] > 0.8]
print("\n4. Cross-Selling Opportunities:")
for idx, rule in high_confidence_rules.iterrows():
    antecedents = ', '.join(list(rule['antecedents']))
    consequents = ', '.join(list(rule['consequents']))
    print(f" - Strong recommendation: When customers buy [{antecedents}], suggest [{consequents}] as an additional purchase.")

# Products often purchased together
print("\n5. Products Often Purchased Together:")
for idx, rule in high_support_rules.iterrows():
    antecedents = ', '.join(list(rule['antecedents']))
    consequents = ', '.join(list(rule['consequents']))
    print(f" - [{antecedents}] and [{consequents}] are frequently bought together. Consider bundling them or offering combined discounts.")

